{"version":3,"file":"fetch.js","sources":["../../../src/integrations/fetch.ts"],"sourcesContent":["import type {\n  Client,\n  FetchBreadcrumbData,\n  FetchBreadcrumbHint,\n  HandlerDataFetch,\n  IntegrationFn,\n  Span,\n} from '@sentry/core';\nimport {\n  LRUMap,\n  addBreadcrumb,\n  addFetchInstrumentationHandler,\n  defineIntegration,\n  getBreadcrumbLogLevelFromHttpStatusCode,\n  getClient,\n  instrumentFetchRequest,\n  isSentryRequestUrl,\n  stringMatchesSomePattern,\n} from '@sentry/core';\n\nconst INTEGRATION_NAME = 'Fetch';\n\nconst HAS_CLIENT_MAP = new WeakMap<Client, boolean>();\n\nexport interface Options {\n  /**\n   * Whether breadcrumbs should be recorded for requests\n   * Defaults to true\n   */\n  breadcrumbs: boolean;\n\n  /**\n   * Function determining whether or not to create spans to track outgoing requests to the given URL.\n   * By default, spans will be created for all outgoing requests.\n   */\n  shouldCreateSpanForRequest?: (url: string) => boolean;\n}\n\nconst _fetchIntegration = ((options: Partial<Options> = {}) => {\n  const breadcrumbs = options.breadcrumbs === undefined ? true : options.breadcrumbs;\n  const shouldCreateSpanForRequest = options.shouldCreateSpanForRequest;\n\n  const _createSpanUrlMap = new LRUMap<string, boolean>(100);\n  const _headersUrlMap = new LRUMap<string, boolean>(100);\n\n  const spans: Record<string, Span> = {};\n\n  /** Decides whether to attach trace data to the outgoing fetch request */\n  function _shouldAttachTraceData(url: string): boolean {\n    const client = getClient();\n\n    if (!client) {\n      return false;\n    }\n\n    const clientOptions = client.getOptions();\n\n    if (clientOptions.tracePropagationTargets === undefined) {\n      return true;\n    }\n\n    const cachedDecision = _headersUrlMap.get(url);\n    if (cachedDecision !== undefined) {\n      return cachedDecision;\n    }\n\n    const decision = stringMatchesSomePattern(url, clientOptions.tracePropagationTargets);\n    _headersUrlMap.set(url, decision);\n    return decision;\n  }\n\n  /** Helper that wraps shouldCreateSpanForRequest option */\n  function _shouldCreateSpan(url: string): boolean {\n    if (shouldCreateSpanForRequest === undefined) {\n      return true;\n    }\n\n    const cachedDecision = _createSpanUrlMap.get(url);\n    if (cachedDecision !== undefined) {\n      return cachedDecision;\n    }\n\n    const decision = shouldCreateSpanForRequest(url);\n    _createSpanUrlMap.set(url, decision);\n    return decision;\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      addFetchInstrumentationHandler(handlerData => {\n        const client = getClient();\n        if (!client || !HAS_CLIENT_MAP.get(client)) {\n          return;\n        }\n\n        if (isSentryRequestUrl(handlerData.fetchData.url, client)) {\n          return;\n        }\n\n        instrumentFetchRequest(handlerData, _shouldCreateSpan, _shouldAttachTraceData, spans, 'auto.http.fetch');\n\n        if (breadcrumbs) {\n          createBreadcrumb(handlerData);\n        }\n      }, true);\n    },\n    setup(client) {\n      HAS_CLIENT_MAP.set(client, true);\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Creates spans and attaches tracing headers to fetch requests.\n */\nexport const fetchIntegration = defineIntegration(_fetchIntegration);\n\nfunction createBreadcrumb(handlerData: HandlerDataFetch): void {\n  const { startTimestamp, endTimestamp } = handlerData;\n\n  // We only capture complete fetch requests\n  if (!endTimestamp) {\n    return;\n  }\n\n  if (handlerData.error) {\n    const data = handlerData.fetchData;\n    const hint: FetchBreadcrumbHint = {\n      data: handlerData.error,\n      input: handlerData.args,\n      startTimestamp,\n      endTimestamp,\n    };\n\n    addBreadcrumb(\n      {\n        category: 'fetch',\n        data,\n        level: 'error',\n        type: 'http',\n      },\n      hint,\n    );\n  } else {\n    const data: FetchBreadcrumbData = {\n      ...handlerData.fetchData,\n      status_code: handlerData.response && handlerData.response.status,\n    };\n    const hint: FetchBreadcrumbHint = {\n      input: handlerData.args,\n      response: handlerData.response,\n      startTimestamp,\n      endTimestamp,\n    };\n    const level = getBreadcrumbLogLevelFromHttpStatusCode(data.status_code);\n\n    addBreadcrumb(\n      {\n        category: 'fetch',\n        data,\n        type: 'http',\n        level,\n      },\n      hint,\n    );\n  }\n}\n"],"names":[],"mappings":"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"}