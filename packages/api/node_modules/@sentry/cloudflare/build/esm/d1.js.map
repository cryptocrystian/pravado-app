{"version":3,"file":"d1.js","sources":["../../src/d1.ts"],"sourcesContent":["import type { D1Database, D1PreparedStatement, D1Response } from '@cloudflare/workers-types';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, SPAN_STATUS_ERROR, addBreadcrumb, startSpan } from '@sentry/core';\nimport type { Span, SpanAttributes, StartSpanOptions } from '@sentry/core';\n\n// Patching is based on internal Cloudflare D1 API\n// https://github.com/cloudflare/workerd/blob/cd5279e7b305003f1d9c851e73efa9d67e4b68b2/src/cloudflare/internal/d1-api.ts\n\nconst patchedStatement = new WeakSet<D1PreparedStatement>();\n\n/**\n * Patches the query methods of a Cloudflare D1 prepared statement with Sentry.\n */\nfunction instrumentD1PreparedStatementQueries(statement: D1PreparedStatement, query: string): D1PreparedStatement {\n  if (patchedStatement.has(statement)) {\n    return statement;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  statement.first = new Proxy(statement.first, {\n    apply(target, thisArg, args: Parameters<typeof statement.first>) {\n      return startSpan(createStartSpanOptions(query, 'first'), async () => {\n        const res = await Reflect.apply(target, thisArg, args);\n        createD1Breadcrumb(query, 'first');\n        return res;\n      });\n    },\n  });\n\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  statement.run = new Proxy(statement.run, {\n    apply(target, thisArg, args: Parameters<typeof statement.run>) {\n      return startSpan(createStartSpanOptions(query, 'run'), async span => {\n        const d1Response = await Reflect.apply(target, thisArg, args);\n        applyD1ReturnObjectToSpan(span, d1Response);\n        createD1Breadcrumb(query, 'run', d1Response);\n        return d1Response;\n      });\n    },\n  });\n\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  statement.all = new Proxy(statement.all, {\n    apply(target, thisArg, args: Parameters<typeof statement.all>) {\n      return startSpan(createStartSpanOptions(query, 'all'), async span => {\n        const d1Result = await Reflect.apply(target, thisArg, args);\n        applyD1ReturnObjectToSpan(span, d1Result);\n        createD1Breadcrumb(query, 'all', d1Result);\n        return d1Result;\n      });\n    },\n  });\n\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  statement.raw = new Proxy(statement.raw, {\n    apply(target, thisArg, args: Parameters<typeof statement.raw>) {\n      return startSpan(createStartSpanOptions(query, 'raw'), async () => {\n        const res = await Reflect.apply(target, thisArg, args);\n        createD1Breadcrumb(query, 'raw');\n        return res;\n      });\n    },\n  });\n\n  patchedStatement.add(statement);\n\n  return statement;\n}\n\n/**\n * Instruments a Cloudflare D1 prepared statement with Sentry.\n *\n * This is meant to be used as a top-level call, under the hood it calls `instrumentD1PreparedStatementQueries`\n * to patch the query methods. The reason for this abstraction is to ensure that the `bind` method is also patched.\n */\nfunction instrumentD1PreparedStatement(statement: D1PreparedStatement, query: string): D1PreparedStatement {\n  // statement.bind() returns a new instance of D1PreparedStatement, so we have to patch it as well.\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  statement.bind = new Proxy(statement.bind, {\n    apply(target, thisArg, args: Parameters<typeof statement.bind>) {\n      return instrumentD1PreparedStatementQueries(Reflect.apply(target, thisArg, args), query);\n    },\n  });\n\n  return instrumentD1PreparedStatementQueries(statement, query);\n}\n\n/**\n * Add D1Response meta information to a span.\n *\n * See: https://developers.cloudflare.com/d1/build-with-d1/d1-client-api/#return-object\n */\nfunction applyD1ReturnObjectToSpan(span: Span, d1Result: D1Response): void {\n  if (!d1Result.success) {\n    span.setStatus({ code: SPAN_STATUS_ERROR });\n  }\n\n  span.setAttributes(getAttributesFromD1Response(d1Result));\n}\n\nfunction getAttributesFromD1Response(d1Result: D1Response): SpanAttributes {\n  return {\n    'cloudflare.d1.duration': d1Result.meta.duration,\n    'cloudflare.d1.rows_read': d1Result.meta.rows_read,\n    'cloudflare.d1.rows_written': d1Result.meta.rows_written,\n  };\n}\n\nfunction createD1Breadcrumb(query: string, type: 'first' | 'run' | 'all' | 'raw', d1Result?: D1Response): void {\n  addBreadcrumb({\n    category: 'query',\n    message: query,\n    data: {\n      ...(d1Result ? getAttributesFromD1Response(d1Result) : {}),\n      'cloudflare.d1.query_type': type,\n    },\n  });\n}\n\nfunction createStartSpanOptions(query: string, type: 'first' | 'run' | 'all' | 'raw'): StartSpanOptions {\n  return {\n    op: 'db.query',\n    name: query,\n    attributes: {\n      'cloudflare.d1.query_type': type,\n      [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.db.cloudflare.d1',\n    },\n  };\n}\n\n/**\n * Instruments Cloudflare D1 bindings with Sentry.\n *\n * Currently, only prepared statements are instrumented. `db.exec` and `db.batch` are not instrumented.\n *\n * @example\n *\n * ```js\n * // env.DB is the D1 DB binding configured in your `wrangler.toml`\n * const db = instrumentD1WithSentry(env.DB);\n * // Now you can use the database as usual\n * await db.prepare('SELECT * FROM table WHERE id = ?').bind(1).run();\n * ```\n */\nexport function instrumentD1WithSentry(db: D1Database): D1Database {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  db.prepare = new Proxy(db.prepare, {\n    apply(target, thisArg, args: Parameters<typeof db.prepare>) {\n      const [query] = args;\n      return instrumentD1PreparedStatement(Reflect.apply(target, thisArg, args), query);\n    },\n  });\n\n  return db;\n}\n"],"names":[],"mappings":"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"}