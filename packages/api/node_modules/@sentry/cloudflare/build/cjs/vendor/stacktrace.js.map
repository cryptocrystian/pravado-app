{"version":3,"file":"stacktrace.js","sources":["../../../src/vendor/stacktrace.ts"],"sourcesContent":["// Vendored from https://github.com/robertcepa/toucan-js/blob/036568729e49d0a937de527dc32d73580d9a41b3/packages/toucan-js/src/stacktrace.ts\n// MIT License\n\n// Copyright (c) 2022 Robert Cepa\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nimport { basename, createStackParser, nodeStackLineParser } from '@sentry/core';\nimport type { StackLineParser, StackLineParserFn, StackParser } from '@sentry/core';\n\ntype GetModuleFn = (filename: string | undefined) => string | undefined;\n\n/**\n * Stack line parser for Cloudflare Workers.\n * This wraps node stack parser and adjusts root paths to match with source maps.\n *\n */\nfunction workersStackLineParser(getModule?: GetModuleFn): StackLineParser {\n  const [arg1, arg2] = nodeStackLineParser(getModule);\n\n  const fn: StackLineParserFn = line => {\n    const result = arg2(line);\n    if (result) {\n      const filename = result.filename;\n      // Workers runtime runs a single bundled file that is always in a virtual root\n      result.abs_path = filename !== undefined && !filename.startsWith('/') ? `/${filename}` : filename;\n      // There is no way to tell what code is in_app and what comes from dependencies (node_modules), since we have one bundled file.\n      // So everything is in_app, unless an error comes from runtime function (ie. JSON.parse), which is determined by the presence of filename.\n      result.in_app = filename !== undefined;\n    }\n    return result;\n  };\n\n  return [arg1, fn];\n}\n\n/**\n * Gets the module from filename.\n *\n * @param filename\n * @returns Module name\n */\nexport function getModule(filename: string | undefined): string | undefined {\n  if (!filename) {\n    return;\n  }\n\n  // In Cloudflare Workers there is always only one bundled file\n  return basename(filename, '.js');\n}\n\n/** Cloudflare Workers stack parser */\nexport const defaultStackParser: StackParser = createStackParser(workersStackLineParser(getModule));\n"],"names":["nodeStackLineParser","basename","createStackParser"],"mappings":";;;;AAAA;AACA;;;AA2BA;AACA;AACA;AACA;AACA;AACA,SAAS,sBAAsB,CAAC,SAAS,EAAiC;AAC1E,EAAE,MAAM,CAAC,IAAI,EAAE,IAAI,IAAIA,wBAAmB,CAAC,SAAS,CAAC;;AAErD,EAAE,MAAM,EAAE,GAAsB,QAAQ;AACxC,IAAI,MAAM,MAAO,GAAE,IAAI,CAAC,IAAI,CAAC;AAC7B,IAAI,IAAI,MAAM,EAAE;AAChB,MAAM,MAAM,QAAA,GAAW,MAAM,CAAC,QAAQ;AACtC;AACA,MAAM,MAAM,CAAC,QAAS,GAAE,aAAa,SAAA,IAAa,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAE,GAAE,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAA,GAAA,QAAA;AACA;AACA;AACA,MAAA,MAAA,CAAA,MAAA,GAAA,QAAA,KAAA,SAAA;AACA;AACA,IAAA,OAAA,MAAA;AACA,GAAA;;AAEA,EAAA,OAAA,CAAA,IAAA,EAAA,EAAA,CAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAA,SAAA,CAAA,QAAA,EAAA;AACA,EAAA,IAAA,CAAA,QAAA,EAAA;AACA,IAAA;AACA;;AAEA;AACA,EAAA,OAAAC,aAAA,CAAA,QAAA,EAAA,KAAA,CAAA;AACA;;AAEA;AACA,MAAA,kBAAA,GAAAC,sBAAA,CAAA,sBAAA,CAAA,SAAA,CAAA;;;;;"}