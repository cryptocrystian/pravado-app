name: V3 Brand Compliance Audit

on:
  pull_request:
    paths:
      - 'apps/web/src/**/*.tsx'
      - 'apps/web/src/**/*.ts'
      - 'apps/web/src/**/*.jsx'
      - 'apps/web/src/**/*.js'
      - 'apps/web/src/**/*.css'
  push:
    branches: [main, orchestration/ui-overhaul-v3]

jobs:
  brand-audit:
    name: V3 Brand Compliance Check
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'apps/web/package-lock.json'
      
      - name: Install dependencies
        working-directory: apps/web
        run: npm ci
      
      - name: Run V3 Brand Compliance Audit
        working-directory: apps/web
        run: |
          echo "üé® Checking V3 brand compliance..."
          npx tsx scripts/ui/audit-colors-v3.ts src
        
      - name: Check for forbidden patterns
        working-directory: apps/web
        run: |
          echo "üîç Checking for forbidden patterns..."
          
          # Check for bg-white
          if grep -r "bg-white" src/ --include="*.tsx" --include="*.jsx" --include="*.ts" --include="*.js"; then
            echo "‚ùå Found bg-white usage. Use bg-island with data-surface='content'"
            exit 1
          fi
          
          # Check for text-blue-*
          if grep -r "text-blue-[0-9]" src/ --include="*.tsx" --include="*.jsx" --include="*.ts" --include="*.js"; then
            echo "‚ùå Found text-blue-* usage. Use text-ai-teal-* instead"
            exit 1
          fi
          
          # Check for hex colors (excluding #fff in specific contexts)
          if grep -r "#[0-9a-fA-F]\{3,8\}" src/ --include="*.tsx" --include="*.jsx" --include="*.ts" --include="*.js" --include="*.css" | grep -v "color:\s*#fff"; then
            echo "‚ùå Found hex color usage. Use HSL variables only"
            exit 1
          fi
          
          echo "‚úÖ No forbidden patterns found"
      
      - name: Verify content islands
        working-directory: apps/web  
        run: |
          echo "üèùÔ∏è Checking content island compliance..."
          
          # Check Dashboard has data-surface="content"
          if [ -f "src/pages/Dashboard.tsx" ] || [ -f "src/pages/DashboardV3.tsx" ]; then
            if ! grep -q 'data-surface="content"' src/pages/Dashboard*.tsx 2>/dev/null; then
              echo "‚ùå Dashboard must have data-surface='content' on main content"
              exit 1
            fi
          fi
          
          # Check Analytics
          if [ -f "src/pages/Analytics.tsx" ]; then
            if ! grep -q 'data-surface="content"' src/pages/Analytics.tsx; then
              echo "‚ùå Analytics must have data-surface='content' on main content"
              exit 1
            fi
          fi
          
          # Check ContentStudio
          if [ -f "src/pages/ContentStudio.tsx" ]; then
            if ! grep -q 'data-surface="content"' src/pages/ContentStudio.tsx; then
              echo "‚ùå ContentStudio must have data-surface='content' on main content"
              exit 1
            fi
          fi
          
          echo "‚úÖ Content islands properly configured"
      
      - name: Generate compliance report
        if: always()
        working-directory: apps/web
        run: |
          echo "üìä Generating compliance report..."
          npx tsx scripts/ui/audit-colors-v3.ts src > brand-compliance-report.txt 2>&1 || true
          
      - name: Upload compliance report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: brand-compliance-report
          path: apps/web/brand-compliance-report.txt
          
      - name: Comment PR with results
        if: github.event_name == 'pull_request' && failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('apps/web/brand-compliance-report.txt', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ‚ùå V3 Brand Compliance Failed\n\n<details>\n<summary>View detailed report</summary>\n\n\`\`\`\n${report}\n\`\`\`\n</details>\n\nPlease fix all brand violations before merging.`
            });