name: Preview Comment
on:
  workflow_run:
    workflows: ["Build and Deploy"]
    types: [completed]
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: read
  pull-requests: write
  deployments: read

jobs:
  preview-comment:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'pull_request')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Get PR number
        id: pr
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "number=${{ github.event.number }}" >> $GITHUB_OUTPUT
          else
            # Extract from workflow_run context
            PR_NUMBER=$(gh api repos/${{ github.repository }}/pulls --jq ".[] | select(.head.sha==\"${{ github.event.workflow_run.head_sha }}\") | .number")
            echo "number=$PR_NUMBER" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy Worker Preview
        id: worker-deploy
        if: steps.pr.outputs.number
        run: |
          echo "üöÄ Deploying Worker preview..."
          
          # Deploy to worker preview environment
          cd packages/api
          
          # Create preview worker name
          PREVIEW_NAME="pravado-api-pr-${{ steps.pr.outputs.number }}"
          
          # Deploy using wrangler
          if [ -n "${{ secrets.CLOUDFLARE_API_TOKEN }}" ]; then
            npx wrangler deploy --name "$PREVIEW_NAME" --env preview
            
            WORKER_URL="https://$PREVIEW_NAME.workers.dev"
            echo "worker_url=$WORKER_URL" >> $GITHUB_OUTPUT
            echo "‚úÖ Worker deployed to: $WORKER_URL"
          else
            echo "‚ö†Ô∏è CLOUDFLARE_API_TOKEN not available, skipping worker deploy"
            echo "worker_url=" >> $GITHUB_OUTPUT
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Get Pages Preview URL
        id: pages
        if: steps.pr.outputs.number
        run: |
          echo "üîç Looking for Pages deployment..."
          
          # Try to get the preview URL from GitHub deployments
          PAGES_URL=""
          
          # Check for Cloudflare Pages deployment
          if [ -n "${{ secrets.CLOUDFLARE_API_TOKEN }}" ]; then
            # Construct typical Cloudflare Pages preview URL
            PAGES_URL="https://pravado-app-pr-${{ steps.pr.outputs.number }}.pages.dev"
            echo "pages_url=$PAGES_URL" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è No Cloudflare token available for Pages URL"
            echo "pages_url=" >> $GITHUB_OUTPUT
          fi

      - name: Wait for deployments
        if: steps.pr.outputs.number
        run: |
          echo "‚è≥ Waiting for deployments to be ready..."
          sleep 30  # Give deployments time to propagate

      - name: Test preview deployments
        id: test-previews
        if: steps.pr.outputs.number
        run: |
          PAGES_URL="${{ steps.pages.outputs.pages_url }}"
          WORKER_URL="${{ steps.worker-deploy.outputs.worker_url }}"
          
          PAGES_STATUS="unknown"
          WORKER_STATUS="unknown"
          
          # Test Pages deployment
          if [ -n "$PAGES_URL" ]; then
            if curl -f -s "$PAGES_URL" > /dev/null; then
              PAGES_STATUS="‚úÖ ready"
            else
              PAGES_STATUS="‚ö†Ô∏è pending"
            fi
          fi
          
          # Test Worker deployment
          if [ -n "$WORKER_URL" ]; then
            if curl -f -s "$WORKER_URL/health" > /dev/null; then
              WORKER_STATUS="‚úÖ ready"
            else
              WORKER_STATUS="‚ö†Ô∏è pending"
            fi
          fi
          
          echo "pages_status=$PAGES_STATUS" >> $GITHUB_OUTPUT
          echo "worker_status=$WORKER_STATUS" >> $GITHUB_OUTPUT

      - name: Create or update preview comment
        if: steps.pr.outputs.number
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = '${{ steps.pr.outputs.number }}';
            const pagesUrl = '${{ steps.pages.outputs.pages_url }}';
            const workerUrl = '${{ steps.worker-deploy.outputs.worker_url }}';
            const pagesStatus = '${{ steps.test-previews.outputs.pages_status }}';
            const workerStatus = '${{ steps.test-previews.outputs.worker_status }}';
            
            let commentBody = '## üöÄ Deploy Previews\n\n';
            
            if (pagesUrl) {
              commentBody += `### üåê Frontend Preview\n`;
              commentBody += `**URL:** ${pagesUrl}\n`;
              commentBody += `**Status:** ${pagesStatus}\n\n`;
            }
            
            if (workerUrl) {
              commentBody += `### ‚ö° API Preview\n`;
              commentBody += `**URL:** ${workerUrl}\n`;
              commentBody += `**Status:** ${workerStatus}\n`;
              commentBody += `**Health:** ${workerUrl}/health\n\n`;
            }
            
            if (!pagesUrl && !workerUrl) {
              commentBody += '‚ö†Ô∏è No preview deployments available\n\n';
            }
            
            commentBody += '### üß™ Test Commands\n';
            commentBody += '```bash\n';
            if (pagesUrl) {
              commentBody += `# Test frontend\ncurl -I ${pagesUrl}\n`;
            }
            if (workerUrl) {
              commentBody += `# Test API health\ncurl ${workerUrl}/health\n`;
              commentBody += `# Test API endpoints\ncurl -H "Authorization: Bearer <token>" ${workerUrl}/dashboard/stats\n`;
            }
            commentBody += '```\n\n';
            
            commentBody += `_Updated at ${new Date().toISOString()}_\n\n`;
            commentBody += '<!-- PREVIEW_COMMENT_MARKER -->';

            // Find existing preview comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const previewComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('<!-- PREVIEW_COMMENT_MARKER -->')
            );

            if (previewComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: previewComment.id,
                body: commentBody,
              });
              console.log('Updated existing preview comment');
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody,
              });
              console.log('Created new preview comment');
            }

      - name: Send success telemetry
        if: success() && steps.pr.outputs.number
        run: |
          npx tsx scripts/devops/ph-event.ts dev_ci_passed \
            --previewUrl "${{ steps.pages.outputs.pages_url }}" \
            --workerPreviewUrl "${{ steps.worker-deploy.outputs.worker_url }}"
        env:
          POSTHOG_API_KEY: ${{ secrets.POSTHOG_API_KEY }}
          GITHUB_PR_NUMBER: ${{ steps.pr.outputs.number }}