name: Agentic CI Pipeline

on:
  push:
    branches: [ main, 'feat/*' ]
  pull_request:
    branches: [ main ]

jobs:
  install-and-cache:
    name: Install Dependencies & Cache
    runs-on: ubuntu-latest
    outputs:
      node-cache-key: ${{ steps.cache-node.outputs.cache-hit }}
      playwright-cache-key: ${{ steps.cache-playwright.outputs.cache-hit }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json

      - name: Cache node_modules
        id: cache-node
        uses: actions/cache@v4
        with:
          path: apps/web/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('apps/web/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        if: steps.cache-node.outputs.cache-hit != 'true'
        working-directory: apps/web
        run: npm ci

      - name: Cache Playwright browsers
        id: cache-playwright
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('apps/web/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers and dependencies
        working-directory: apps/web
        run: |
          # Always install system dependencies (they're not cached)
          sudo npx playwright install-deps
          # Install browsers only if not cached
          if [[ "${{ steps.cache-playwright.outputs.cache-hit }}" != "true" ]]; then
            npx playwright install chromium
          fi

  typecheck:
    name: TypeScript Type Checking
    runs-on: ubuntu-latest
    needs: install-and-cache
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: apps/web/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('apps/web/package-lock.json') }}

      - name: Run type checking
        working-directory: apps/web
        run: npm run typecheck

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: install-and-cache
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: apps/web/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('apps/web/package-lock.json') }}

      - name: Run unit tests
        working-directory: apps/web
        run: npm run test -- --run
        
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: apps/web/coverage/

  ui-audit:
    name: UI Color & Style Audit
    runs-on: ubuntu-latest
    needs: install-and-cache
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: apps/web/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('apps/web/package-lock.json') }}

      - name: Install Node.js dependencies for UI audit
        run: npm install glob@^11.0.3

      - name: Run UI audit  
        run: node scripts/ui/audit-colors.mjs

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ui-audit-results
          path: scripts/ui/audit-results.json
          retention-days: 7

  playwright-e2e:
    name: Playwright E2E Tests
    runs-on: ubuntu-latest
    needs: install-and-cache
    strategy:
      fail-fast: false
      matrix:
        project: [chromium]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: apps/web/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('apps/web/package-lock.json') }}

      - name: Restore Playwright cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('apps/web/package-lock.json') }}

      - name: Install Playwright system dependencies
        working-directory: apps/web
        run: sudo npx playwright install-deps

      - name: Run Playwright tests
        working-directory: apps/web
        run: npm run test:e2e -- --project=${{ matrix.project }}
        env:
          CI: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results-${{ matrix.project }}
          path: |
            apps/web/test-results/
            apps/web/playwright-report/
            scripts/mcp/test-results/
          retention-days: 7

      - name: Upload screenshots on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-screenshots-${{ matrix.project }}
          path: apps/web/test-results/*.png
          retention-days: 7

  mcp-assertions:
    name: MCP Contract Assertions
    runs-on: ubuntu-latest
    needs: install-and-cache
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: apps/web/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('apps/web/package-lock.json') }}

      - name: Restore Playwright cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('apps/web/package-lock.json') }}

      - name: Install Playwright system dependencies
        working-directory: apps/web
        run: sudo npx playwright install-deps

      - name: Run MCP assertions
        working-directory: apps/web
        run: npm run mcp:run
        env:
          CI: true

      - name: Upload MCP test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mcp-assertions-results
          path: |
            scripts/mcp/test-results/
            scripts/mcp/test-results.json
          retention-days: 7

  build:
    name: Production Build
    runs-on: ubuntu-latest
    needs: [typecheck, unit-tests, ui-audit]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: apps/web/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('apps/web/package-lock.json') }}

      - name: Build application
        working-directory: apps/web
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-assets
          path: apps/web/dist/
          retention-days: 7

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [typecheck, unit-tests, ui-audit, playwright-e2e, mcp-assertions, build]
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "## Agentic CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| TypeScript | ${{ needs.typecheck.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| UI Audit | ${{ needs.ui-audit.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Playwright E2E | ${{ needs.playwright-e2e.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| MCP Assertions | ${{ needs.mcp-assertions.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifacts Available:" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 Test Results & Coverage" >> $GITHUB_STEP_SUMMARY
          echo "- 🎨 UI Audit Report" >> $GITHUB_STEP_SUMMARY
          echo "- 📸 Screenshots (on failure)" >> $GITHUB_STEP_SUMMARY
          echo "- 🏗️ Production Build" >> $GITHUB_STEP_SUMMARY